package models

import akka.actor.ActorRef


sealed trait FillLike {

  val askTradingPartyRef: ActorRef

  val bidTradingPartyRef: ActorRef

  val instrument: String

  val price: Double

  val quantity: Int
  
}


/** Represents a partial fill generated by some MatchingEngine.
  *
  * @param askTradingPartyRef: ActorRef of the participant submitting the ask order.
  * @param bidTradingPartyRef: ActorRef of the participant submitting the bid order.
  * @param price: Agreed price for the partial fill.
  * @param quantity: Agreed quantity for the partial fill.
  */
case class PartialFill(askTradingPartyRef: ActorRef,
                       bidTradingPartyRef: ActorRef,
                       instrument: String,
                       price: Double,
                       quantity: Int) extends FillLike {

  override def toString: String = {
    s",${askTradingPartyRef.path.name},${bidTradingPartyRef.path.name},$getClass,$instrument,$price,$quantity"
  }

}


/** Represents a total fill generated by some MatchingEngine.
  *
  * @param askTradingPartyRef: ActorRef of the trading party submitting the ask order.
  * @param bidTradingPartyRef: ActorRef of the trading party submitting the bid order.
  * @param price: Agreed price for the filled order.
  * @param quantity: Agreed quantity for the filled order.
  */
case class TotalFill(askTradingPartyRef: ActorRef,
                            bidTradingPartyRef: ActorRef,
                            instrument: String,
                            price: Double,
                            quantity: Int) extends FillLike {

  override def toString: String = {
    s",${askTradingPartyRef.path.name},${bidTradingPartyRef.path.name},$getClass,$instrument,$price,$quantity"
  }

}

