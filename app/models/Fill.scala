/*
Copyright 2015 David R. Pugh

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

import java.util.UUID

import akka.actor.ActorRef


sealed trait FilledOrderLike {

  def askOrderId: UUID

  def seller: ActorRef

  def bidOrderId: UUID

  def buyer: ActorRef

  def tradable: SecurityLike

  def price: Double

  def quantity: Double
  
}


/** Represents a partial fill generated by some MatchingEngine.
  *
  * @param askOrderId: UUID of the ask order that is being filled.
  * @param seller: ActorRef of the participant submitting the ask order.
  * @param bidOrderId: UUID of the bid order that is being filled.
  * @param buyer: ActorRef of the participant submitting the bid order.
  * @param price: Agreed price for the partial fill.
  * @param quantity: Agreed quantity for the partial fill.
  */
case class PartialFilledOrder(askOrderId: UUID,
                              seller: ActorRef,
                              bidOrderId: UUID,
                              buyer: ActorRef,
                              tradable: SecurityLike,
                              price: Double,
                              quantity: Double) extends FilledOrderLike {

  require(price > 0, "Price must be strictly positive.")
  require(quantity > 0, "Quantity must be strictly positive.")

  override def toString: String = {
    s",${seller.path.name},${buyer.path.name},$getClass,$tradable,$price,$quantity"
  }

}


/** Represents a total fill generated by some MatchingEngine.
  *
  * @param askOrderId: UUID of the ask order that is being filled.
  * @param seller: ActorRef of the participant submitting the ask order.
  * @param bidOrderId: UUID of the bid order that is being filled.
  * @param price: Agreed price for the filled order.
  * @param quantity: Agreed quantity for the filled order.
  */
case class TotalFilledOrder(askOrderId: UUID,
                            seller: ActorRef,
                            bidOrderId: UUID,
                            buyer: ActorRef,
                            tradable: SecurityLike,
                            price: Double,
                            quantity: Double) extends FilledOrderLike {

  require(price > 0, "Price must be strictly positive.")
  require(quantity > 0, "Quantity must be strictly positive.")

  override def toString: String = {
    s",${seller.path.name},${buyer.path.name},$getClass,$tradable,$price,$quantity"
  }

}

